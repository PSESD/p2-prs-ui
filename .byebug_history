exit
organization.create_admin_user(contact.email, contact.name)
organization
contact.email
contact.name
contact
n
exit
s
contact
n
@authorized_entity.mainContactObject
exit
URI::HTTPS.build(host: url_host).to_s
url_host
exit
Contact.new(@authorized_entity.mainContact).fullWebAddress
Contact.new(@authorized_entity.mainContact)
@authorized_entity.main_contact.fullWebAddress
@authorized_entity.main_contact
@authorized_entity.mainContact
@authorized_entity
@service
n
service
exit
service
exit
service
exit
user.save
n
user.permissions
                         students: [])
                         permissions: [],
                         role: "case-worker-unrestricted",
                         activate: true,
                         activateDate: DateTime.now,
                         activateStatus: "Active",
user.permissions.new(organization: 9,
user
user.email = "test2@new_organization.com"
n
exit
user.save
n
exit
user.save
n
user.save
n
exit
n
user.save
n
exit
user.save
n
exit
organization.create_user
exit
organization.create_user
exit
authorized_entity_service_path(authorized_entity_id: organization.authorized_entity.id, id: organization.authorized_entity_service.id)
authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
organization.authorized_entity
organization.authorized_entity_service.name
organization
exit
response = http_request("post", path, districts_student_params.to_json)
n
s
n
exit
n
districts_student_params
n
student_id
s
n
student_ids
exit
districts_student_params
exit
districts_student_params
exit
districts_student_params
exit
districts_student_params
student_params
district_student_params
exit
@services_with_info.values.map(&:first)
@services_with_info.values
@services_with_info["1"][0]
exit
DataSet.create_objects service_info[0].dataSets
service_info[0].dataSets
service_info[0]
service_info
exit
s
exit
@services_with_info
exit
service.main_contact["email"]
service.main_contact
service
exit
service.authorized_entity
service
exit
n
authorizedEntityId
s
service
exit
services
params[:id]
is
@district
params
district_params
params
exit
params
is
@district
exit
n
id
is
service_ids
exit
n
exception
n
service
exit
service
n
id
exit
params[:services]
params
exit
service.authorized_entity
@services
service.main_contact["email"]
service.main_contact
service
exit
@services.each { |s| puts s.main_contact["name"] }
@services.each do |s|
@services.first.main_contact
@services.first.mainContact
@services.mainContact
@services.count
@services
exit
service.main_contact["email"]
service
exit
service.main_contact["phone"]
service.main_contact["email"]
service.main_contact["title"]
service.main_contact["name"]
service.main_contact
service
exit
service.authorized_entity.main_contact
exit
authorized_entity
service.main_contact
service
exit
n
name.to_sym
@attributes
name
n
name
args.first
name
n
args
name
n
key
n
request.parameters
s
n
exit
@service.externalServiceId = params[:externalServiceId]
@service.externalServiceId
@service.new_record
@service.new_record = true
@service.new_record
@service
n
params
exit
args
*args
n
params[:externalServiceId]
n
@service
params
exit
service.authorized_entity.id
service.authorized_entity.name
service.authorized_entity
service
exit
AuthorizedEntity.find("authorizedEntities/#{service.authorizedEntityId}")
AuthorizedEntity.find("authorizedEntities/#{service.authorizedEntityId})
AuthorizedEntity.find(service.authorizedEntityId)
AuthorizedEntity.find(service.authorizedEntityId).first.name
service.authorizedEntityId
service.name
service.authorizedEntity
service
n
exit
service_params_json
exit
service_params_xml
service_params_json
{"externalServiceId"=>"3", "initiationDate"=>"2017-02-01", "expirationDate"=>"2017-02-28", "dataSet"=>[{"id"=>"1", "name"=>"Demographics"}], "requiresPersonnel"=>"false", "district_id"=>"157"}
service_params
service_params_json
exit
params[:service]
exit
params[:service]
exit
service_params
exit
params
exit
params
exit
JSON.parse(service_params_json)
@district.id
service_params_json
service_params
exit
contact.hash
contact
exit
Date.strptime(d, '%m-%d-%Y')
d = Date.parse(consent["startDate"])
Date.parse(consent["startDate"])
consent["startDate"]
