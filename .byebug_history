exit
@service
exit
format.xml { render xml: student_filtered }
render xml: student_filtered
exit
District::Service.find(route).first
route
n
exit
n
District::Student.find(route).first
route
n
exit
attrs.keys
attrs
n
attribute_name
exit
@student = District::Student.find(route).first
n
exit
attribute_name
attrs
exit
@student = District::Student.find(route).first
@service
@district
route
exit
render xml: student_filtered
exit
respond_to do |format|
respond_to :xml
r = District::Student.filters("/filters", header_params)
exit
HTTParty.get(BaseUrl + route + url_params, headers: filter_headers)
n
s
filter_headers
filter_headers = headers.merge(header_params)
headers.merge(header_params)
header_params
heawder_params
header_params.delete "personnelId"
header_params
n
params[:object_type]
n
headers
filter_headers = headers.merge(header_params)
h = headers.merge(header_params)
headers
params
exit
params[:object_type]
params
exit
response
exit
response
filter_headers
exit
response.parsed_response
response
objects_hash
exit
payload
n
s
@data_object.destroy(route)
route
n
exit
@data_set.data_objects_instantiated.group_by(&:sifObjectName)
@data_set.dataObjects
@data_set
exit
district.services
services
n
district.services.count
district
exit
districts.first
n
districts
district
s
@districts
exit
BaseUrl + route + url_params
exit
attrs.map { |k, v| k }
attrs
attribute_name
s
attrs
exit
route
n
params
exit
create_objects(object_hash)
object_hash
n
response.parsed_response
resposne.parsed_response
response
object_hash
n
HTTParty.get(BaseUrl + route + url_params, headers: current_headers)
BaseUrl + route + url_params
current_headers
n
exit
headers
credentials
headers
object_hash
n
object_hash
objects_hash
n
BaseUrl + route + url_params
route
exit
Date.parse(student.consent["startDate"])
Date.parse(student.consent["startDate"]
student.consent
student
exit
@service.data_sets_instantiated
@service.dataSets
@service
exit
o = @data_set.dataObjects
o = dataObjects.map { |data_object| DataObject.new(data_object) }
exit
@data_set.dataObjects.map { |data_object| DataSet::DataObject.new(data_object) }.group_by(&:sifObjectName)
@data_set.dataObjects.map { |data_object| DataSet::DataObject.new(data_object) }
@data_set.dataObjects.map { |data_object| DataObject.new(data_object) }
@data_set.dataObjects.class
@data_set.dataObjects
@data_set.dataObjects.map { |data_object| DataObject.new(data_object) }
@dataSet.dataObjects.map { |data_object| DataObject.new(data_object) }
dataObjects.map { |data_object| DataObject.new(data_object) }
    end
      DataObject.new(data_object)
  dataObjects.map do |data_object|
@data_set.dataObjects.first.sifObjectName
@data_set.dataObjects.sifObjectName
@data_set.dataObjects
@data_set.count
@data_set
exit
"hello".include?("Date")
"hello".include?("h")
"hello".includes?("h")
DateTime.parse("1012")
DateTime.parse("1036")
DateTime.parse("1036)
n
attribute_value
attribute_name
@attributes[attribute_name] = DateTime.parse(attribute_value)
n
attribute_value.to_s[/^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6]))))$/]
n
s
n
s
attributes
exit
n
attribute_value.to_s[/^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/]
n
s
attributes
exit
n
s
attributes
exit
n
s
n
s
attributes
attrubutes
exit
