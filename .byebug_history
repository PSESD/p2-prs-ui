exit
@district.mainContact
@district
@distict
@distict.mainContact
@district
exit
@district
f.input
f
exit
@district.mainContact
@district.to_hash.keys
@district
exit
raw_attributes @district.name
raw_attributes @district
raw_attributes @district, class: "pull-right", title: "Raw Attributes"
exit
@district.to_hash.keys
@district.to_h.keys
@district.mainContact
@district
exit
safe_join [service.mainContact["email"], service.mainContact["phone"]].compact, " / "
safe_join [service.mainContact["name"], service.mainContact["title"]].compact, ", " 
safe_join [service.mainContact["name"], service.mainContact["title"].compact, ", "
service.mainContact["name"]
service.mainContact[:name]
service.mainContact.name
service.mainContact.try(:name)
service.mainContact
exit
service.authorized_entity.name
service.authorized_entity
AuthorizedEntity.find("authorizedEntities/1")
service
service.authorizedEntityName
exit
@services.first
@services
service
exit
@services.first.expirationDate.try(&:year)
@services.collect(&:expirationDate)
@services.first.collect(&:expirationDate)
@services.first.expirationDate
@dataSets.collect(&:id)
exit
Date.parse self[:expirationDate]
self[:initiationDate]
initiationDate
Date.parse self[:initiationDate]
exit
@services.first.initiationDate
@services.first
exit
@services.first.initiationDate
@services
@service
exit
@services.first
Date.parse("2016-07-31").class
@services.first.expirationDate.class
Date.parse("2016-07-31")
@services.first.requiresPersonnel
Date.parse("2015-08-01")
@services.first.authorizedEntityId
@services.first.initiationDate
@services.first.expirationDate
@services.first.id
@services.first.expirationDate
@services.first
@services.collect(&:expirationDate)
@services
@services.first.collect(&:expirationDate)
@dataSets.collect(&:id).uniq.size > 1
return redirect_to(:back, alert: mismatched_datasets_alert) if @dataSets.collect(&:id).uniq.size > 1
@dataSets.collect(&:id)
@dataSets
@dataSets.collect{|d| d.collect(&:id) }
@dataSets
exit
@services
@dataSets = DataSet.create_objects(@services.first.dataSets)
attr_hashes
s
DataSet::DataObject.create_objects(d)
DataObject.create_objects(d)
d
exit
n
attrs
n
s
attr_hashes
s
DataSet.create_objects d
d
exit
attrs
n
exit
n
s
@services.first.dataSets.collect{ |d| DataSet.create_objects(d) }
@services.first.dataSets.collect{ |d| puts d }
@services.first.dataSets.collect{ |d| puts d }.flatten
@dataSets
@services.first.dataSets
@services.dataSets
@dataSets
@dataSets.collect{|d| d.collect(&:id) }
exit
@dataSets = @services.first.dataSets.collect{ |d| DataSet.create_objects(d) }.flatten
@dataSets = @services.first.dataSets.collect{ |d| DataSet.create_objects(d) }
@dataSets = @services.first.dataSets.collect{ |d| DataSet.create_objects(d.dataSets) }
@services.first.dataSets
@services.first
@dataSets = @services.first.dataSets.collect{ |d| DataSet.create_objects(d.dataSets) }
@services.first.dataSets
@services.first
@services.dataSets
@dataSets = @services.first.collect{ |d| DataSet.create_objects(d.dataSets) }
@services.first
exit
@services.flatten.first
@services
@services.first
exit
@dataSets = @services.first.collect{ |d| DataSet.create_objects(d.dataSets) }
@dataSets = @services.first.collect{ |d| DataSets.create_objects(d.dataSets) }
@services.first.collect{ |d| d.dataSets }
@services
exit
response.parsed_response
response = HTTParty.get(BaseUrl + route + url_params, headers: current_headers)
HTTParty.get(BaseUrl + route + url_params, headers: current_headers)
BaseUrl + route + url_params
BaseUrl + route + url_params, headers: current_headers
route
exit
link_to_submit glyph(:edit) + " Generate consent form", class: 'btn btn-info pull-right disabled', action: "consent_form"
link_to_submit glyph(:consent_form) + " Generate consent form", class: 'btn btn-info pull-right disabled'
link_to_submit glyph(:edit) + " Generate consent form", class: 'btn btn-info pull-right disabled'
link_to_submit glyph(:edit)
link_to_submit
exit
id
is
BSON::ObjectId
name
user.permissions
user.persmissions
user
user.to_hash.keys
user.to_h.keys
user.attributes
user
    )
      role: "admin"
      activate: true,
      activateStatus: "Active",
      organization: name,
  user.permissions.new(
user
exit
n
e
n
s
@organization
@user
n
params
exit
@authorized_entities
exit
services
exit
self[:authorizedEntityId]
self[:authorizedEntityId
self
authorizedEntityId
exit
@service
exit
format.xml { render xml: student_filtered }
render xml: student_filtered
exit
District::Service.find(route).first
route
n
exit
n
District::Student.find(route).first
route
n
exit
attrs.keys
attrs
n
attribute_name
exit
@student = District::Student.find(route).first
n
exit
attribute_name
attrs
exit
@student = District::Student.find(route).first
@service
@district
route
exit
render xml: student_filtered
exit
respond_to do |format|
respond_to :xml
r = District::Student.filters("/filters", header_params)
exit
HTTParty.get(BaseUrl + route + url_params, headers: filter_headers)
n
s
filter_headers
filter_headers = headers.merge(header_params)
headers.merge(header_params)
header_params
heawder_params
header_params.delete "personnelId"
header_params
n
params[:object_type]
n
headers
filter_headers = headers.merge(header_params)
h = headers.merge(header_params)
headers
params
exit
params[:object_type]
params
exit
response
exit
response
filter_headers
exit
response.parsed_response
response
objects_hash
exit
payload
n
s
@data_object.destroy(route)
