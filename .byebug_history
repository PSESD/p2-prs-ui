exit
user.set("password")
user.errors
user.save
user
n
user.created = DateTime.now
user.errors.messages
user.errors
user
exit
user
user.errors
n
user.errors
user
exit
res = http_request("post", path, districts_student_params.to_json)
n
s
n
districts_student_params
district_student_params
params
set_params
ids.count
ids
exit
Validations.new(user.errors)
user
n
Validations.new(user.errors)
user
exit
user.save
user
exit
user
exit
user.salt = "ii9V+ke4gLrKGZFi7J/wRvv7Yc7CoVYoXObU/vWEQkdcDEcErbYBnv57HQ4Ruu0h1NSAlgp2yFEhGUS21BFsMHcetjstHz+0x8JV1zRFZRcDvJLyshz4Qd4E8gIeN8mCPzlDyCZzSH1VSd5jE4A7rqwAQCKSX8gaqnndSXh6Ans="
user
exit
user.salt = "ii9V+ke4gLrKGZFi7J/wRvv7Yc7CoVYoXObU/vWEQkdcDEcErbYBnv57HQ4Ruu0h1NSAlgp2yFEhGUS21BFsMHcetjstHz+0x8JV1zRFZRcDvJLyshz4Qd4E8gIeN8mCPzlDyCZzSH1VSd5jE4A7rqwAQCKSX8gaqnndSXh6Ans="
user.set("password")
user.save
n
user.set("password")
user
exit
EXIT
user.save
user = set_permissions(user)
user
n
user
   64:                                         hashedPassword: "4845da69ecfd47a93d809ee5ef8d01157a56b9fec3431a498fcefa2f54537c974d3cf9866f69990faee0ef3a1c548c3850face88b490105411b7bf1d0ee1688a93c80c7596c6c048cea4711c2d2c71408043aabc907c44d6a02c51bca7a6545791dcdc4aeca69e2131b5d73a2ec674225e298aaa7341777af1814ddf2136c07c956f98dff7ca567e51f68fdd2ee0215f95a429be57216620075ec80a527056652d7496abcf237cbe9befbf5de6a562a2caaaeae4b66eb09fd3073a9c80d185ffdd7aea787de814a927a5fc5daa4fc4c38f6b991c62a2e7763d936b23f9c2de5b7af77a0934aac87aff637236668d9c0a68af2346c9a91c8deadf10a6fd0358bedc36169c0cb0ece39b2868c8fe2a016470f303570d4a59968026c19567dca71c33922f5e0034a3d557ae37f523a662dfcc2d51fff1f41e093373ebcabf950d328cf0bbc65b31d85ab2691b19011223ef9bd41f618726c129be071e28b54c1ac5103e795186f33850810d80d0fd67dba722834bad029a77cced794f02b718f45dac87bdcba16f067beaf1fbfd2dcc305a86e61df2be91f9c43928463bd4d81cfb08906b2b93fc371677fac8a9530f27987898411bb018be44af7f01109f8bf5f783951031874d4c8a0c0fedefd2476e6a9db6efd63f189ffa3768d85317d41c970089f75a8a07de32fa323d6abdcb116256cef230e77cd071cbda4376b67c4ddb")n
   63:                                         last_name:last_name,
   62:                                         first_name: first_name,
user = StudentSuccessLink::User.new(email: email,
exit
contact
n
contact
exit
name
exit
URI::HTTPS.build(fragment: url_host).to_s
URI::HTTPS.build(path: url_host).to_s
url_host
URI::HTTPS.build("herokuapp.com")
URI::HTTPS.build(host: "herokuapp.com").to_s
URI::HTTPS.build(host: herokuapp.com).to_s
url_host
exit
URI::HTTPS.build(host: url_host).to_s
n
exit
URI::HTTPS.build(path: url)
URI::HTTPS.build(url)
URI::HTTPS.build(url_host)
URI::HTTPS.build(host: url_host)
URI::HTTPS.build(host: url_host).to_s
url_host
n
url
exit
exity
exit
Rails.application.secrets.organization_url
ENV['ORGANIZATION_URL']
organization_url
org_params
exit
ENV["PRS_URL"]
ENV["ORGANIZATION_URL"]
Rails.application.secrets.organization_url
organization_url
organization
exit
organization.create_admin_user(contact.email, contact.name)
organization
contact.email
contact.name
contact
n
exit
s
contact
n
@authorized_entity.mainContactObject
exit
URI::HTTPS.build(host: url_host).to_s
url_host
exit
Contact.new(@authorized_entity.mainContact).fullWebAddress
Contact.new(@authorized_entity.mainContact)
@authorized_entity.main_contact.fullWebAddress
@authorized_entity.main_contact
@authorized_entity.mainContact
@authorized_entity
@service
n
service
exit
service
exit
service
exit
user.save
n
user.permissions
                         students: [])
                         permissions: [],
                         role: "case-worker-unrestricted",
                         activate: true,
                         activateDate: DateTime.now,
                         activateStatus: "Active",
user.permissions.new(organization: 9,
user
user.email = "test2@new_organization.com"
n
exit
user.save
n
exit
user.save
n
user.save
n
exit
n
user.save
n
exit
user.save
n
exit
organization.create_user
exit
organization.create_user
exit
authorized_entity_service_path(authorized_entity_id: organization.authorized_entity.id, id: organization.authorized_entity_service.id)
authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
organization.authorized_entity
organization.authorized_entity_service.name
organization
exit
response = http_request("post", path, districts_student_params.to_json)
n
s
n
exit
n
districts_student_params
n
student_id
s
n
student_ids
exit
districts_student_params
exit
districts_student_params
exit
districts_student_params
exit
districts_student_params
student_params
district_student_params
exit
@services_with_info.values.map(&:first)
@services_with_info.values
@services_with_info["1"][0]
exit
DataSet.create_objects service_info[0].dataSets
service_info[0].dataSets
service_info[0]
service_info
exit
s
exit
@services_with_info
exit
service.main_contact["email"]
service.main_contact
service
exit
service.authorized_entity
service
exit
n
authorizedEntityId
s
service
exit
services
params[:id]
is
@district
params
district_params
params
exit
params
is
@district
exit
n
id
is
service_ids
exit
n
exception
n
service
exit
service
n
id
exit
params[:services]
params
exit
service.authorized_entity
@services
service.main_contact["email"]
service.main_contact
service
exit
@services.each { |s| puts s.main_contact["name"] }
@services.each do |s|
@services.first.main_contact
@services.first.mainContact
@services.mainContact
@services.count
