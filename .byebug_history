exit
student_filtered = District::Student.filters("/filters", header_params(student.districtStudentId))
student.districtStudentId
student.districtId
student.studentDistrictId
student
exit
student
studentDistrictId
exit
render html: layout: "layouts/modal", locals: { id: "filtersModal", title: "Compiled Filter Rules", dialog_class: "modal-lg", student: student }exit
render html: layout: "layouts/modal", locals: { id: "filtersModal", title: "Compiled Filter Rules", dialog_class: "modal-lg", student: student }
render partial: "districts/students/filters", format: 'json', layout: "layouts/modal", locals: { id: "filtersModal", title: "Compiled Filter Rules", dialog_class: "modal-lg", student: student }
student.districtStudentId
student
}student
id: "filtersModal", title: "Compiled Filter Rules", dialog_class: "modal-lg", student: student
render partial: "districts/students/filters", format: 'json', layout: "layouts/modal", locals: {
}
id: "filtersModal", title: "Compiled Filter Rules", dialog_class: "modal-lg", student: student
render partial: "districts/students/filters", format: 'json', layout: "layouts/modal", locals: {
   19: 
   18: id: "filtersModal", title: "Compiled Filter Rules", dialog_class: "modal-lg", student: student
render partial: "districts/students/filters", format: 'json', layout: "layouts/modal", locals: {
exit
@student_filtered
locals
exit
self.class.class
self.class
self
exit
filters_district_service_student_path(district_id: @district.id, service_id: @service.id, id: 1)
filters_district_service_student_path(district_id: @district.id, service_id: @service.id, id: student.id)
@filters
exit
contact_information(@authorized_entity.main_contact_object)
@authorized_entity.main_contact_object
exit
contact_information(@district.main_contact_object)
@district.main_contact_object
exit
contact.name
Contact.name
contact
exit
Contact.new
@district.mainContactObject = Contact.new
@district.mainContactObject
exit
mainContact
exit
render(partial: "layouts/contact_details", layout: "layouts/popover", object: contact,locals: { id: dom_id, title: (options[:title] || "Contact Information") })
link_to(name_element, "#", options)
link_to(name_element, "#", options) + render(partial: "layouts/contact_details", layout: "layouts/popover", object: contact,locals: { id: dom_id, title: (options[:title] || "Contact Information") })
    )
      locals: { id: dom_id, title: (options[:title] || "Contact Information") }
      partial: "layouts/contact_details", layout: "layouts/popover", object: contact,
  link_to(name_element, "#", options) + render(
name_element
options
contact
exit
student_filtered
exit
link_to glyph("list-alt", 'Filter Rules'), filters_district_service_student_path(district_id: @district.id, service_id: @service.id, id: student.id)
filters_district_service_student_path(district_id: @district.id, service_id: @service.id, id: student.id)
exit
filter_headers
exit
contact.input :name, required: false, value: @authorized_entity.mainContactObject.name
@authorized_entity.mainContactObject.name
exit
:contact_information.call
contact_information(@authorized_entity.mainContactObject).class
contact_information(@authorized_entity.mainContactObject)
exit
Contact.new mainContact
mainContact
exit
Contact.new
mainContact
exit
consent.input :consentType, label: "Consent Type", collection: District::Student::ConsentTypes, input_html: { value: @student.consent["consentType"] }
@student.consent["consentType"]
consent.input :consentType, label: "Consent Type", input_html: { value: @student.consent["consentType"] }, collection: District::Student::ConsentTypes
exit
Date.parse(@student.consent["startDate"])
@student.consent["startDate"]
@student.consent["consentType"]
@student.consent
@student
exit
consent.input
@student.consent["consentType"]
exit
@student.consent["consentType"]
@student.consent[:consentType]
Consent.new(@student.consent)
@student.consent.consentType
@student.consent.try(:consentType)
@student.consent
exit
n
  URI::HTTPS.build(host: url_host).to_s
n
url_host
url
exit
n
url
n
url
n
url
n
URI::HTTPS.build(host: url).to_s
url
exit
organization.authorized_entity_service
puts "hello" unless (organization.authorized_entity.class == Array) || organization.authorized_entity_service
puts "hello" unless (organization.authorized_entity.class == Array) && organization.authorized_entity_service
puts "hello" if (organization.authorized_entity.class == Array) && organization.authorized_entity_service
organization.authorized_entity.class != Array
organization.authorized_entity.class == Array
organization.authorized_entity.class
organization.authorized_entity.class != Array
organization.authorized_entity
exit
(organization.authorized_entity.class != Array) && organization.authorized_entity_service
organization.authorized_entity.class
organization.authorized_entity.class != Array
organization.authorized_entity
exit
organization.authorized_entity.class
organization.authorized_entity.nil?
organization.authorized_entity == nil
organization.authorized_entity
!organization.authorized_entity.nil?
organization.authorized_entity.nil?exit
organization.authorized_entity.nil?
organization.authorized_entity
   27: <% byebug %>
   26: <% if organization.authorized_entity && organization.authorized_entity_service %>
   25: <td>
organization.authorized_entity_service
authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
exit
organization.authorized_entity
organization.authorized_entity == *Error in evaluation*
organization.authorized_entity
organization.authorized_entity_service
organization.authorized_entity
authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
exit
self.new(attributes)
s
attr_hashes.map { |attrs| self.new(attrs) }
attr_hashes
s
create_objects(object_hash)
s
object_hash
n
object_hash
n
headers
resposne
n
s
route
n
byebug
n
self.new(attributes)
attributes
s
self
attr_hashes.map { |attributes| self.new(attributes) }
attr_hashes
s
 create_objects(object_hash)
s
object_hash
n
BaseUrl + route + url_params
n
headers
n
const_name
s
route
n
exit
@authorized_entity = AuthorizedEntity.find(route)
route = "/authorizedEntities/2"
organization[:authorizedEntityId]
organization.authorized_entity_service
organization.authorized_entity
authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
organization.authorized_entity_service.name
link_to organization.authorized_entity_service.name, authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
link_to organization.authorized_entity_service.name, authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service]) if organization.authorized_entity && organization.authorized_entity_service
exit
organization[:externalServiceId]
organization[:authorizedEntityId]
organization[:authorizedEntityId] && organization[:externalServiceId]
exit
object_hash.keys
object_hash
exit
n
object_hash.first.class
object_hash.first
object_hash
exit
object_hash.first.keys.include? "id"
object_hash.first.keys
object_hash.first
object_hash
exit
object_hash
object.hash
response
objects_hash
exit
organization.authorized_entity_service
organization.authorized_entity
organization[:authorizedEntityId]
n
exit
authorizedEntityId.nil?
@authorized_entity
@authorized_entity = AuthorizedEntity.find(route)
route = "/authorizedEntities/#{authorizedEntityId}"
exit
@authorized_entity ||= AuthorizedEntity.find(route)
route = "/authorizedEntities/#{authorizedEntityId}"
authorizedEntityId
exit
attrs
exit
@attributes
attrs
a_key
exit
DataSet::DataObject.destroy(route)
route
n
route
exit
district.services
district
exit
attr_hashes.map { |attributes| self.new(attributes) }
=> 20:     s)
