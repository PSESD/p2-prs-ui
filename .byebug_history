exit
l Date.parse(student.consent.startDate), format: :short_date
Date.parse(student.consent.startDate)
student.consent.startDate
Date.parse(student.consent.try(:co
student.consent
student
exit
District::Student.all(district_id: districtId, service_id: id)
exit
@service.dataSets.items.first.id
@service.dataSets.items.first
@service.dataSets.items.count
@service.dataSets.items
@service.dataSets.items.first.name
@service.dataSets.items
h(@service.dataSets.items.first.name)
h(@service.datasets.items.first.name)
h(dataset.name)
exit
n
s
@service.dataSets.collect{ |dataset| link_to(h(dataset.name), data_set_path(dataset)) }
@service.dataSets.items.count
@service.dataSets.items
@service.dataSets.class
@service.dataSets
@service
safe_join(@service.dataSets.collect{ |dataset| link_to(h(dataset.name), data_set_path(dataset)) }, ", ")
safe_join(@service.dataSets.collect{ |dataset| link_to(h(dataset.name), data_set_path(dataset)) }, ", "
exit
title
district_services_path(a)
link_to(title, district_services_path(a))
link_to(title, district_services_path(a)
exit
@service.items.count
@service.items.last
@service.items.first.class
@service.items
@service.class
link_to glyph(:pencil) + " Edit", [:edit, @district, @service]
exit
link_to(guess_label_text(object), district_services_path(object))
guess_label_text(object)
guess_label_text(object), object
link_to(guess_label_text(object), object)
current_page?(district_services_path(object))
current_page?(district_services(object))
object.respond_to?(:name)
object.respond_to? to_label
object.respond_to? name
services_path object
district_services_path object
object
exit
service_path service
service
s
exit
a.items.first.class
a.items.last
a.items
a
a.class
a.to_model
current_page?(a)
exit
n
@items.first.class
@items
s
guess_label_text( a.select{|a| current_page?(a) })
a
exit
arg.class
arg
exit
arg.class
exit
District::Service.find(district_id: params[:district_id], id: params[:id]).class
District::Service.find(district_id: params[:district_id], id: params[:id])
District::Service.find(district_id: params[:district_id], id: params[:id]).class
params[:id]
params[:id]]
params[:district_id]
District::Service.find(district_id: params[:district_id], id: params[:id]).class
District::Service.find(district_id: params[:district_id], id: params[:id]
params
params[:district_id]
exit
args.last.last.class
args.last.first.class
args.last.class
args.second.class
args.first.class
args.first
args.last.class
args.last
arg.last
args.last.class
args.last
args.second
args.last
arg
exit
args.second.class
args.last
args.second
args.first
args.count
args
arg
args
for object in arg { puts "hello" }
for object in arg
arg
exit
title
exit
arg.last.first.dataSets.find(1)
arg.last.first.dataSets.all
arg.last.first.dataSets.dataSet
arg.last.first.dataSets.dataSet.id
arg.last.first.dataSets.dataSet.is
arg.last.first.dataSets.id
arg.last.first.dataSets
exit
@service.class
@service.to_model
@district.to_model
@service
@district
exit
arg.last.first.dataSets.dataSet.first.id
arg.last.first.dataSets.dataSet.first
arg.last.first.dataSets.dataSet
arg.last.first.dataSets
arg.last.first
arg.last.first.dataSets.name
arg.last.first.dataSets.class
arg.last.first.dataSets.name
arg.last.first.dataSets.class
arg.last.first.dataSets.items
arg.last.first.dataSets.first
arg.last.first.dataSets
arg.last.first.dataSets.id
arg.last.first.dataSets.all
arg.last.first.dataSets.class
arg.last.first.class
arg
exit
self
value
exit
arg.last
arg.first
exit
arg.last.first.dataSets
arg.last.first.class
arg.last.first
arg.last.class
arg.last
arg.last.first.dataSets.name
arg.last.first.dataSets.class
arg.last.first.dataSets
arg.last.first.class
arg.last.first
arg.last.first.first
exit
arg.last.first.dataSets[1]
arg.last.first.dataSets
arg.last.first.class.dataSets
arg.last.first.class
arg.last.first
exit
arg.last.first.dataSets
arg.last.first.to_model
arg.last.first.dataSets.each { |set| puts set.to_model }
arg.last.first.dataSets.each { |set| set.id }
arg.last.first.dataSets.id
arg.last.first.dataSets.first
arg.last.first.dataSets
arg.last.first.instance_methods(false)
arg.last.first.method_names(false)
arg.last.first.attributes
arg.last.first.keys
arg.last.first.count
arg.last.first.name
arg.last.first.districtId
arg.last.last
arg.last.first
arg.last.count
arg.last.each { |set| puts set }
arg.last.each { |set| set }
arg.last.each do |set|
arg.first
exit
arg.first.class
arg.first.webAddress
arg.first
arg.last.first
arg.last
arg.to_json
arg
arg.last
last.class
last
last = arg.last.to_json
arg.last.to_json
arg.last
exit
arg.last.class
args.first.name
District.instance_methods(true)
District.instance_methods(true))
District.instance_methods(false)
District.column_names_hash
District.column_names
District.columns
arg.first.attribute_present?
arg.first.attribute_names
arg.first.attributes
arg.first.class
arg.last.class
arg.count
arg
exit
args
exit
arg.respond_to?(m)
arg.respond_to(m)
arg.respond_to(m
m
n
arg.respond_to? m
m
s
label_text
s
arg
arg.try(methods.find{ |m| arg.respond_to?(m) })
label_text = arg.try(methods.find{ |m| arg.respond_to?(m) }) rescue nil
methods
method
s
guess_label_text(arg.last)
arg.last.class
arg.last
arg
arg.last.is_a?(Symbol)
exit
arg[1].title
arg[1].to_label
arg[1].name
arg[1].class
