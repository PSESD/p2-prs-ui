exit
self.new
self
exit
BaseUrl + "/districts/" + id + url_params
(BaseUrl + "/districts/" + id + url_params)
(BaseUrl + "/districts/" + id + url_params
id
self
exit
s
@district.destroy
@district
exit
service.initiationDate
service.authorizedEntityId
service.id
service[:initiationDate]
service.[:initiationDate]
service.initiationDate
service
exit
District::Service.new services_hash.first
services_hash.first
services_hash.class
exit
BaseUrl + "/districts/#{district_id}/services" + url_params
exit
District.new(parsed.first)
parsed.first
parsed = response.parsed_response
n
exit
response.parsed_response.class
response.parsed_response
response = HTTParty.get(BaseUrl + "/districts" + url_params, headers: headers)
exit
response = HTTParty.get(BaseUrl, headers: headers)
HTTParty.get(BaseUrl, headers: headers)
exit
n
districts_student_params
total
n
student_ids.count
student_ids
n
exit
n
districts_student_params
n
student_ids
n
districts_student_params
exit
student = http_request("post", path, districts_student_params.to_json)
path = "/districts/" + @district.id + "/services/" + @service.id + "/students"
student = http_request("post", "/districts/" + @district.id + "/services/" + @service.id + "/students", districts_student_params.to_json)
student = http_request("post", "/districts/" + @district.id + "/services/" + @service.id + "/students", district_student_params.to_json)
districts_student_params.to_json
district_params
District::Student.create(districts_student_params.to_json)
districts_student_params.to_json
districts_student_params
districts_student_params[:districtServiceId] = districts_student_params[:service_id]
districts_student_params
exit
Districts:Students.all
Student.all
n
s
exit
districts_student_params.to_json
districts_student_params
districts_student_params[:districtServiceId] = districts_student_params[:service_id]
districts_student_params
districts_student_params[:districtServiceId] = districts_student_params[:district_service_id]
districts_student_params[:districtServiceId] = districts_student_params[:district__service_id]
districts_student_params[:districtServiceId] = districts_student_params[:district_id]
districts_student_params[:districtServiceId] = district_student_params[:district_id]
districts_student_params_json
districts_student_params
exit
exut
@service.students.items
@service.students
@service
exit
[1, 2, 3].each_with_index { |n,i| puts n.to_s + " index: " + i.to_s }
districts_student_params
districts_student_params[:districtStudentId].split(",").map(&:strip)
districts_student_params[:districtStudentId]
districts_student_params.districtStudentId
districts_student_params[districtStudentId]
districts_student_params.districtStudentId
districts_student_params
districts_student_params_json
exit
districts_student_params_json
Resque.enqueue(CreateStudentsWorker, districts_student_params_json)
exit
data_set = http_request("post", "/dataSets", data_set.to_json)
exit
require 'test_helper'
require 'net/http'
data_set = Net("post", "/dataSets", data_set.to_json)
exit
exit 'net/http'
gem 'net/http'
require 'net/http'
data_set = http_request("post", "/dataSets", data_set.to_json)
data_set.to_json
data_set
exit
ActiveRestClient::HTTPBadRequestClientException.superclass.superclass
ActiveRestClient::HTTPBadRequestClientException.superclass
d
d = data_set.save
exit
d.save
DataSet.create
d = DataSet.new
data_set.create.class
e.result
e.result.message
e.status
e.result
e
exit
begin
data_set.create
dataset.create
ActiveRestClient::HTTPServerException => e
ActiveRestClient::HTTPServerException =>
ActiveRestClient::HTTPServerException.status
RestClient.get('https://srx-services-prs-dev.herokuapp.com')
RestClient.get('https://srx-services-prs-dev.herokuapp.com/dataSets')
RestClient.get('https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test')
ActiveRestClient.get 'https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test'
RestClient.get 'https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test'
RestClient.get(https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test)
RestClient.get https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test
RestClient.get https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=default;contextId=default
ActiveRestClient.methods.sort
ActiveRestClient.get
RestClient.get
exit
data_set.create
exit
user.save
user.permissions.new(organization: name, activateStatus: "Active",activate: true,role: "admin")
id
self
user
exit
user.permissions.new(organization: id,activateStatus: "Active",activate: true,role: "admin
user.save
user.permissions.new(organization: id.to_s,activateStatus: "Active",activate: true,role: "admin")
user.permissions.new(
id.to_s
id
"Active
id
user.save
user
n
    )
      role: "admin"
      activate: true,
      activateStatus: "Active",
      organization: id,
  user.permissions.new(
user
exit
@user
@user = StudentSuccessLink::User.find(params[:user_id])
params[:user_id]
params
exit
validates_inclusion_of :activateStatus, in: %w[Pending Active]
validates_presence_of :organization, :role
self
exit
AuthorizedEntity.find(2).count
AuthorizedEntity.find 2
self.authorizedEntityId
exit
@organization
@organization.authorized_entity_service.first.try(:name)
@organization.authorized_entity_service
@organization
exit
arg.class
arg
concat content_tag(:li, link_to(guess_label_text(arg), [args.second, args.last]))
concat content_tag(:li, link_to(guess_label_text(arg), arg))
exit
request.get_params
param.to_sym
param
request.get_params.delete(param.to_sym).to_s
request.get_params[param.to_sym]
request.get_params
request.headers[param]
param
exit
request.headers
exit
[nil].empty?
[].empty?
district_name
services
exit
@district_services.each { |d, services| puts services.count }
@district_services.each do |d, services|
@district_services["Federal Way School District"]
@district_services
exit
@district_services.first
@district_services.count {|district, service| !service.first.empty?}
@district_services.count {|service| !service.first.empty?}
[1,2,3].select {|n| n == 2 }
@district_services.count {|service| !service.empty?}
@district_services.count {|service| !service.empty?)
@district_services.count
@districts.count
@district_services
exit
services.first.first
services.first
service
exit
services.first.first.items
services.first.first
services.first
services
district_name
@district_services.first.first
@district_services.first
@district_services.second.first
@district_services.first
@district_services
exit
AuthorizedEntity.all.items
exit
AuthorizedEntity.find(params[:authorized_entity_id]).first
AuthorizedEntity.find(params[:authorized_entity_id])
params
exit
self
service
exit
@service
exit
all_districts.first
all_full.first
