exit
data_set = http_request("post", "/dataSets", data_set.to_json)
exit
require 'test_helper'
require 'net/http'
data_set = Net("post", "/dataSets", data_set.to_json)
exit
exit 'net/http'
gem 'net/http'
require 'net/http'
data_set = http_request("post", "/dataSets", data_set.to_json)
data_set.to_json
data_set
exit
ActiveRestClient::HTTPBadRequestClientException.superclass.superclass
ActiveRestClient::HTTPBadRequestClientException.superclass
d
d = data_set.save
exit
d.save
DataSet.create
d = DataSet.new
data_set.create.class
e.result
e.result.message
e.status
e.result
e
exit
begin
data_set.create
dataset.create
ActiveRestClient::HTTPServerException => e
ActiveRestClient::HTTPServerException =>
ActiveRestClient::HTTPServerException.status
RestClient.get('https://srx-services-prs-dev.herokuapp.com')
RestClient.get('https://srx-services-prs-dev.herokuapp.com/dataSets')
RestClient.get('https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test')
ActiveRestClient.get 'https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test'
RestClient.get 'https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test'
RestClient.get(https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test)
RestClient.get https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=test;contextId=test
RestClient.get https://srx-services-prs-dev.herokuapp.com/dataSets;zoneId=default;contextId=default
ActiveRestClient.methods.sort
ActiveRestClient.get
RestClient.get
exit
data_set.create
exit
user.save
user.permissions.new(organization: name, activateStatus: "Active",activate: true,role: "admin")
id
self
user
exit
user.permissions.new(organization: id,activateStatus: "Active",activate: true,role: "admin
user.save
user.permissions.new(organization: id.to_s,activateStatus: "Active",activate: true,role: "admin")
user.permissions.new(
id.to_s
id
"Active
id
user.save
user
n
    )
      role: "admin"
      activate: true,
      activateStatus: "Active",
      organization: id,
  user.permissions.new(
user
exit
@user
@user = StudentSuccessLink::User.find(params[:user_id])
params[:user_id]
params
exit
validates_inclusion_of :activateStatus, in: %w[Pending Active]
validates_presence_of :organization, :role
self
exit
AuthorizedEntity.find(2).count
AuthorizedEntity.find 2
self.authorizedEntityId
exit
@organization
@organization.authorized_entity_service.first.try(:name)
@organization.authorized_entity_service
@organization
exit
arg.class
arg
concat content_tag(:li, link_to(guess_label_text(arg), [args.second, args.last]))
concat content_tag(:li, link_to(guess_label_text(arg), arg))
exit
request.get_params
param.to_sym
param
request.get_params.delete(param.to_sym).to_s
request.get_params[param.to_sym]
request.get_params
request.headers[param]
param
exit
request.headers
exit
[nil].empty?
[].empty?
district_name
services
exit
@district_services.each { |d, services| puts services.count }
@district_services.each do |d, services|
@district_services["Federal Way School District"]
@district_services
exit
@district_services.first
@district_services.count {|district, service| !service.first.empty?}
@district_services.count {|service| !service.first.empty?}
[1,2,3].select {|n| n == 2 }
@district_services.count {|service| !service.empty?}
@district_services.count {|service| !service.empty?)
@district_services.count
@districts.count
@district_services
exit
services.first.first
services.first
service
exit
services.first.first.items
services.first.first
services.first
services
district_name
@district_services.first.first
@district_services.first
@district_services.second.first
@district_services.first
@district_services
exit
AuthorizedEntity.all.items
exit
AuthorizedEntity.find(params[:authorized_entity_id]).first
AuthorizedEntity.find(params[:authorized_entity_id])
params
exit
self
service
exit
@service
exit
all_districts.first
all_full.first
all_full.count
all_full = District.all_full
District.all_full
all_districts.first
all_districts = District.all
all_districts
all_districts = District.all
exit
response.headers
response
exit
District::Service.all(district_id: id).items.count
District::Service.all(district_id: id).items
District::Service.all(district_id: id).class.items
District::Service.all(district_id: id).class
District::Service.all(district_id: id)
id
is
exit
@service.district_services.keys
@service.district_services
@service
District::Service.find(id: 1033)
District::Service.find(1033)
@authorized_entity
@service
exit
District::Service.all(district_id: id).items.first
District::Service.all(district_id: id).items.count
District::Service.all(district_id: id).class
District::Service.all(district_id: id)
exit
services.first
services.count
services = District::Service.all(district_id: id) { |item| District::Service.find(district_id: id, id: item.id) }
District::Service.all(district_id: id) { |item| District::Service.find(district_id: id, id: item.id) }
d { |item| District::Service.find(district_id: id, id: item.id) }
d.count.each { |item| District::Service.find(district_id: id, id: item.id) }
d.count
d = District::Service.all(district_id: id)
District::Service.all(district_id: id)
id
exit
District::Service.all
exit
url
JSON.parse json_params
json_params
exit
contact.class
contact
exit
district
exit
@authorized_entity
@service
@district
exit
xit
exit
concat content_tag(:li, link_to(guess_label_text(arg), [args.second, args.last]))
args.second
args.count
args
args.first.id
AuthorizedEntity.send(args.first)
method.call(:authorized_entities)
args.first.class
args.last
args.first
content_tag(:li, link_to(guess_label_text(arg), [args.first, args.last]))
arg.class
arg
guess_label_text(arg)
link_to(guess_label_text(arg), arg)
n
arg.class
arg
n
arg.class
exit
concat content_tag(:li, link_to(guess_label_text(arg), arg))
content_tag(:li, link_to(guess_label_text(arg), arg))
link_to(guess_label_text(arg), arg)
guess_label_text(arg)
arg
exit
@service
@district
@student
exit
params
parrams
districts_student_params_json
params
@job
@service
@district
@job
@job_id
