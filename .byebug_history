exit
services.first.first
services.first
service
exit
services.first.first.items
services.first.first
services.first
services
district_name
@district_services.first.first
@district_services.first
@district_services.second.first
@district_services.first
@district_services
exit
AuthorizedEntity.all.items
exit
AuthorizedEntity.find(params[:authorized_entity_id]).first
AuthorizedEntity.find(params[:authorized_entity_id])
params
exit
self
service
exit
@service
exit
all_districts.first
all_full.first
all_full.count
all_full = District.all_full
District.all_full
all_districts.first
all_districts = District.all
all_districts
all_districts = District.all
exit
response.headers
response
exit
District::Service.all(district_id: id).items.count
District::Service.all(district_id: id).items
District::Service.all(district_id: id).class.items
District::Service.all(district_id: id).class
District::Service.all(district_id: id)
id
is
exit
@service.district_services.keys
@service.district_services
@service
District::Service.find(id: 1033)
District::Service.find(1033)
@authorized_entity
@service
exit
District::Service.all(district_id: id).items.first
District::Service.all(district_id: id).items.count
District::Service.all(district_id: id).class
District::Service.all(district_id: id)
exit
services.first
services.count
services = District::Service.all(district_id: id) { |item| District::Service.find(district_id: id, id: item.id) }
District::Service.all(district_id: id) { |item| District::Service.find(district_id: id, id: item.id) }
d { |item| District::Service.find(district_id: id, id: item.id) }
d.count.each { |item| District::Service.find(district_id: id, id: item.id) }
d.count
d = District::Service.all(district_id: id)
District::Service.all(district_id: id)
id
exit
District::Service.all
exit
url
JSON.parse json_params
json_params
exit
contact.class
contact
exit
district
exit
@authorized_entity
@service
@district
exit
xit
exit
concat content_tag(:li, link_to(guess_label_text(arg), [args.second, args.last]))
args.second
args.count
args
args.first.id
AuthorizedEntity.send(args.first)
method.call(:authorized_entities)
args.first.class
args.last
args.first
content_tag(:li, link_to(guess_label_text(arg), [args.first, args.last]))
arg.class
arg
guess_label_text(arg)
link_to(guess_label_text(arg), arg)
n
arg.class
arg
n
arg.class
exit
concat content_tag(:li, link_to(guess_label_text(arg), arg))
content_tag(:li, link_to(guess_label_text(arg), arg))
link_to(guess_label_text(arg), arg)
guess_label_text(arg)
arg
exit
@service
@district
@student
exit
params
parrams
districts_student_params_json
params
@job
@service
@district
@job
@job_id
exit
bulk_create_status_district_service_students_path(@district, @service, @job_id)
n
bulk_create_status_district_service_students_path(@district, @service, @job_id)
JSON.parse(@job)
@job
n
params[:id]
exit
params[:id]
params
pararms
redirect_to(bulk_create_status_district_service_students_path(@district, @service, @job_id))
bulk_create_status_district_service_students_path(@district, @service, @job_id)
@job_id
exit
ENV['REDIS_URL']
Resque::Plugins::Status::Hash.get(params[:id])
params[:id]
params
exit
JSON.parse(@job_id)["id"]
JSON.parse(@job_id).id
JSON.parse(@job_id)
@job_id.id
@job.id
redirect_to(bulk_create_status_district_service_students_path(@district, @service, 4233))
redirect_to(bulk_create_status_district_service_students_path(@district, @service, 4233)
JSON.parse(@job_id)
@job_id
exit
post("/districts/#{@district.id}/services/#{@service.id}/students", districts_student_params.to_json)
post("/districts/#{@district.id}/services/#{@service.id}/students", districts_student_params)
districts_student_params
params
exit
params[:student][:consent][:startDate] = params[:student][:consent][:consentStartDate]
params[:student][:consent]
params[:student]
exit
params
params[:student][:consent][:startDate] = "2016-11-24"
params[:student][:consent]
params[:student]
params
exit
districts_student_params
params
exit
ENV['REDIS_URL']
exit
exiy
@job_id
n
CreateStudentsWorker.create(districts_student_params)
params[:id]
params
exit
AuthorizedEntity.find(service.authorizedEntityId).first.name
AuthorizedEntity.find(service.authorizedEntityId).first
AuthorizedEntity.find(service.authorizedEntityId)
service.name
service
exit
@services.items
@services
exit
http.request(request)
JSON.parse(json_params)
json_params
exit
District.find item.id
item
exit
concat content_tag(:li, link_to(guess_label_text(arg), [args.second, args.last]))
args.second
args.count
args
args.first.id
AuthorizedEntity.send(args.first)
method.call(:authorized_entities)
args.first.class
args.last
args.first
content_tag(:li, link_to(guess_label_text(arg), [args.first, args.last]))
arg.class
arg
guess_label_text(arg)
link_to(guess_label_text(arg), arg)
n
arg.class
arg
n
arg.class
exit
concat content_tag(:li, link_to(guess_label_text(arg), arg))
content_tag(:li, link_to(guess_label_text(arg), arg))
link_to(guess_label_text(arg), arg)
guess_label_text(arg)
arg
exit
@service
@district
@student
exit
params
parrams
districts_student_params_json
params
@job
@service
@district
@job
@job_id
exit
bulk_create_status_district_service_students_path(@district, @service, @job_id)
n
bulk_create_status_district_service_students_path(@district, @service, @job_id)
JSON.parse(@job)
@job
n
params[:id]
exit
params[:id]
params
pararms
redirect_to(bulk_create_status_district_service_students_path(@district, @service, @job_id))
