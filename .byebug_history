exit
contact.input :name, required: false, value: @authorized_entity.mainContactObject.name
@authorized_entity.mainContactObject.name
exit
:contact_information.call
contact_information(@authorized_entity.mainContactObject).class
contact_information(@authorized_entity.mainContactObject)
exit
Contact.new mainContact
mainContact
exit
Contact.new
mainContact
exit
consent.input :consentType, label: "Consent Type", collection: District::Student::ConsentTypes, input_html: { value: @student.consent["consentType"] }
@student.consent["consentType"]
consent.input :consentType, label: "Consent Type", input_html: { value: @student.consent["consentType"] }, collection: District::Student::ConsentTypes
exit
Date.parse(@student.consent["startDate"])
@student.consent["startDate"]
@student.consent["consentType"]
@student.consent
@student
exit
consent.input
@student.consent["consentType"]
exit
@student.consent["consentType"]
@student.consent[:consentType]
Consent.new(@student.consent)
@student.consent.consentType
@student.consent.try(:consentType)
@student.consent
exit
n
  URI::HTTPS.build(host: url_host).to_s
n
url_host
url
exit
n
url
n
url
n
url
n
URI::HTTPS.build(host: url).to_s
url
exit
organization.authorized_entity_service
puts "hello" unless (organization.authorized_entity.class == Array) || organization.authorized_entity_service
puts "hello" unless (organization.authorized_entity.class == Array) && organization.authorized_entity_service
puts "hello" if (organization.authorized_entity.class == Array) && organization.authorized_entity_service
organization.authorized_entity.class != Array
organization.authorized_entity.class == Array
organization.authorized_entity.class
organization.authorized_entity.class != Array
organization.authorized_entity
exit
(organization.authorized_entity.class != Array) && organization.authorized_entity_service
organization.authorized_entity.class
organization.authorized_entity.class != Array
organization.authorized_entity
exit
organization.authorized_entity.class
organization.authorized_entity.nil?
organization.authorized_entity == nil
organization.authorized_entity
!organization.authorized_entity.nil?
organization.authorized_entity.nil?exit
organization.authorized_entity.nil?
organization.authorized_entity
   27: <% byebug %>
   26: <% if organization.authorized_entity && organization.authorized_entity_service %>
   25: <td>
organization.authorized_entity_service
authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
exit
organization.authorized_entity
organization.authorized_entity == *Error in evaluation*
organization.authorized_entity
organization.authorized_entity_service
organization.authorized_entity
authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
exit
self.new(attributes)
s
attr_hashes.map { |attrs| self.new(attrs) }
attr_hashes
s
create_objects(object_hash)
s
object_hash
n
object_hash
n
headers
resposne
n
s
route
n
byebug
n
self.new(attributes)
attributes
s
self
attr_hashes.map { |attributes| self.new(attributes) }
attr_hashes
s
 create_objects(object_hash)
s
object_hash
n
BaseUrl + route + url_params
n
headers
n
const_name
s
route
n
exit
@authorized_entity = AuthorizedEntity.find(route)
route = "/authorizedEntities/2"
organization[:authorizedEntityId]
organization.authorized_entity_service
organization.authorized_entity
authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
organization.authorized_entity_service.name
link_to organization.authorized_entity_service.name, authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service])
link_to organization.authorized_entity_service.name, authorized_entity_service_path([organization.authorized_entity, organization.authorized_entity_service]) if organization.authorized_entity && organization.authorized_entity_service
exit
organization[:externalServiceId]
organization[:authorizedEntityId]
organization[:authorizedEntityId] && organization[:externalServiceId]
exit
object_hash.keys
object_hash
exit
n
object_hash.first.class
object_hash.first
object_hash
exit
object_hash.first.keys.include? "id"
object_hash.first.keys
object_hash.first
object_hash
exit
object_hash
object.hash
response
objects_hash
exit
organization.authorized_entity_service
organization.authorized_entity
organization[:authorizedEntityId]
n
exit
authorizedEntityId.nil?
@authorized_entity
@authorized_entity = AuthorizedEntity.find(route)
route = "/authorizedEntities/#{authorizedEntityId}"
exit
@authorized_entity ||= AuthorizedEntity.find(route)
route = "/authorizedEntities/#{authorizedEntityId}"
authorizedEntityId
exit
attrs
exit
@attributes
attrs
a_key
exit
DataSet::DataObject.destroy(route)
route
n
route
exit
district.services
district
exit
attr_hashes.map { |attributes| self.new(attributes) }
=> 20:     s)
attr_hashes.map do |attributes|s)
   22:     end
   21:       self.new(attributes)
attr_hashes.map do |attributes|
attr_hashes.count
attr_hashes
n
s
district.services
s
n
districts.count
districts
s
@service
@service.district_services(@districts)
exit
exi
@service
n
service
exit
AuthorizedEntity.destroy("/authorizedEntities/" + @authorized_entity.id)
@authorized_entity.id
exit
exi
exit
district.mainContact
district.id
district.main_contact
district = District.find(route).first
District.find(route).first
exit
District::Service.all("/districts/#{@district.id}/services")
AuthorizedEntity.all("/authorizedEntities")
exit
AuthorizedEntity.headers
AuthorizedEntity.all("/authorizedEntities")
@authorized_entities
exit
attrs
a_key
exit
a_key
attrs
exit
attrs
self.class.headers
self.headers
attrs
"89F5FAt907RB" == Rails.application.secrets.prs_shared_secret
Rails.application.secrets.prs_session_token == "d94fa4b6-ed53-4609-b013-a3721f9826f0"
Rails.application.secrets.prs_session_token == d94fa4b6-ed53-4609-b013-a3721f9826f0
Rails.application.secrets.prs_session_token
Rails.application.secrets.prs_url
Rails.application.secrets.prs_context_id
Rails.application.secrets.prs_zone_id
exit
attrs
exit
attrs.include? "error"
attrs
exit
attrs.include?("error")
attrs
json_district
attrs
include Rails.application.routes.url_helpers
districts_path
